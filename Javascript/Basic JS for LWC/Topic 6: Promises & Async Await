## **Topic 6: Promises & Async/Await**

JavaScript is **asynchronous**, meaning it can execute multiple tasks **without waiting** for one to finish before starting another. To handle asynchronous operations, we use **Promises** and **Async/Await**.

---

## **1️⃣ What is a Promise?**  
A **Promise** is an object representing a task that will either **resolve** (success) or **reject** (failure) in the future.  

### **Promise States**
| State       | Meaning |
|------------|---------|
| **Pending**  | Initial state (not yet completed) |
| **Fulfilled** | Operation completed successfully |
| **Rejected**  | Operation failed |

### **2️⃣ Creating a Promise**

const myPromise = new Promise((resolve, reject) => {
    let success = true;  // Try changing this to false

    setTimeout(() => {
        if (success) {
            resolve("✅ Task completed!");
        } else {
            reject("❌ Task failed!");
        }
    }, 2000);  // Simulating a 2-second delay
});


---

### **3️⃣ Handling Promises with `.then()` and `.catch()`**

myPromise
    .then((result) => console.log(result))  // ✅ Success
    .catch((error) => console.log(error));  // ❌ Error


💡 **Best Practice:** Always handle `.catch()` to avoid uncaught errors.

---

## **4️⃣ Async/Await: A Better Way to Handle Promises**  
Instead of `.then()` and `.catch()`, we use `async` and `await` to write **cleaner and readable** code.

### **Example: Converting a Promise to Async/Await**

async function fetchData() {
    try {
        let result = await myPromise;  // Waits until the Promise resolves
        console.log(result);
    } catch (error) {
        console.log(error);
    }
}

fetchData();


💡 **Key Points:**  
✅ `await` pauses execution **until** the Promise resolves.  
✅ `try/catch` handles errors more cleanly than `.catch()`.  

---

## **5️⃣ Real-World Example: Fetching Data from an API**
### **Using `.then()`**

fetch("https://jsonplaceholder.typicode.com/posts/1")
    .then(response => response.json())  // Convert response to JSON
    .then(data => console.log(data))    // Log the data
    .catch(error => console.log(error));  // Handle errors


### **Using Async/Await**

async function getPost() {
    try {
        let response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
        let data = await response.json();
        console.log(data);
    } catch (error) {
        console.log(error);
    }
}

getPost();

💡 **Which One to Use?**  
✅ Use `.then()` when chaining multiple Promises.  
✅ Use `async/await` for cleaner, **easier-to-read** code.  

---

## **6️⃣ Promise.all() – Running Multiple Promises in Parallel**
If you have multiple Promises that can run **at the same time**, use `Promise.all()`.


const promise1 = fetch("https://jsonplaceholder.typicode.com/posts/1").then(res => res.json());
const promise2 = fetch("https://jsonplaceholder.typicode.com/posts/2").then(res => res.json());

Promise.all([promise1, promise2])
    .then(results => console.log(results))
    .catch(error => console.log(error));

✅ **Faster Execution** – Runs both Promises at the same time.  
✅ **Fails if Any Promise Fails** – If **one** Promise rejects, the whole `Promise.all()` fails.

---


