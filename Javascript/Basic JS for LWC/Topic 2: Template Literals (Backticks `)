## **Topic 2: Template Literals (Backticks `` ` ``)**  

### **1Ô∏è‚É£ What Are Template Literals?**  
Template literals are a modern way to handle strings in JavaScript. They allow:  
- Multi-line strings  
- String interpolation (embedding expressions inside strings)  
- Easier readability  

Unlike regular strings (`""` or `''`), template literals use **backticks** (`` ` ``).

---

### **2Ô∏è‚É£ Syntax & Basic Usage**
```javascript
let name = "Pulkit";
console.log(`Hello, my name is ${name}.`);
```
### **Explanation (Word by Word)**
1. We define a variable `name` with `"Pulkit"`.  
2. We use **backticks** (`` ` ``) instead of single or double quotes.  
3. `${name}` is **interpolation**, which **inserts the value of `name`** inside the string.  
4. The output will be:  
   ```
   Hello, my name is Pulkit.
   ```

---

### **3Ô∏è‚É£ Multi-line Strings Without Concatenation**
Before template literals, multi-line strings required `\n` or `+`:
```javascript
let oldMethod = "This is line 1.\n" +
                "This is line 2.";
```
With template literals, it's much cleaner:
```javascript
let newMethod = `This is line 1.
This is line 2.`;
```

---

### **4Ô∏è‚É£ Expressions Inside Template Literals**
You can embed any **expression** inside `${}`:
```javascript
let a = 10, b = 20;
console.log(`The sum is ${a + b}.`); // Output: The sum is 30.
```
Even function calls:
```javascript
function greet(name) {
    return `Hello, ${name}!`;
}
console.log(`${greet("Pulkit")}`); // Output: Hello, Pulkit!
```

---

### **5Ô∏è‚É£ Best Practices**
‚úî Always **use template literals** when dealing with **dynamic values**.  
‚úî Prefer them for **multi-line** strings instead of `\n`.  
‚úî Use `${}` **only when necessary** to keep the code readable.  

---

## ‚úÖ **Your Task**
1. Write a template literal that includes:  
   - Your name  
   - A multi-line string  
   - An expression inside `${}`  
2. Share your output with me! üöÄ  

Let me know if you have any doubts, and we‚Äôll move to the next topic: **Arrow Functions**. üî•

