## **Topic 5: Modules & Imports (`import { xyz } from 'module'`)

### **1Ô∏è‚É£ What Are Modules?**
Modules allow us to break JavaScript code into **separate files**, making it more organized and reusable. Using **ES6 Modules**, we can:
‚úÖ Export functions, objects, or variables from one file.
‚úÖ Import them into another file.
## **2Ô∏è‚É£ Exporting & Importing in JavaScript**

### **A. Named Export & Import** (Used when exporting multiple items)
#### **Exporting (`math.js`)**

export const add = (a, b) => a + b;
export const multiply = (a, b) => a * b;

#### **Importing (`app.js`)**

import { add, multiply } from "./math.js";
console.log(add(2, 3)); // 5
console.log(multiply(2, 3)); // 6

‚úÖ **Use curly braces** `{}` while importing named exports.

---
### **B. Default Export & Import** (Used when exporting only one item)
#### **Exporting (`greet.js`)**

export default function greet(name) {
    return `Hello, ${name}!`;
}

#### **Importing (`app.js`)**

import greet from "./greet.js";
console.log(greet("Pulkit")); // Hello, Pulkit!

‚úÖ **No curly braces** needed for default imports.
‚úÖ **You can rename** the imported function.

---

### **C. Renaming Imports & Exports**
#### **Renaming Export (`math.js`)**

export { add as sum, multiply as product };

#### **Renaming Import (`app.js`)**

import { sum, product } from "./math.js";


‚úÖ Use **`as`** to rename exports or imports.

---

## **3Ô∏è‚É£ Dynamic Imports (`import()`)**
If we don‚Äôt want to load a module **until needed**, we use `import()` (also called **lazy loading**).

async function loadModule() {
    let { add } = await import("./math.js");
    console.log(add(4, 5)); // 9
}
loadModule();

‚úÖ Used in **code-splitting** to improve performance.

---

## **4Ô∏è‚É£ Best Practices**
‚úîÔ∏è Use **named exports** when exporting multiple things.
‚úîÔ∏è Use **default export** when exporting only one thing.
‚úîÔ∏è Use **dynamic imports** for large applications.
‚úîÔ∏è Always specify **relative paths** (`./module.js`).

---

## ‚úÖ **Your Task**
1. Create `math.js` with **two functions** (addition & subtraction).
2. Export them using **named exports**.
3. Import them into `app.js` and use them.

Once you complete this, we‚Äôll move to **Topic 6: Promises & Async/Await** üöÄ

---

